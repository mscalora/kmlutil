#!/usr/bin/env python

from __future__ import print_function
import argparse
import kmlutil
from util import *
from attrdict import AttrDict
#import argcomplete

defaults = kmlutil.defaults

parser = argparse.ArgumentParser(epilog="""Notes:
For the purposes of list and tree filtering, "Path" is used as an alias for kml Placemarks with a "LineString" geometry
and "Point", "Waypoint" and "Placemark" are all aliases for kml Placemarks with a "Point" geometry

** option may be used more than once for multiple values
""")
#argcomplete.autocomplete(parser)

parser.add_argument("kmlfile",
                    help="kml document to process, may be URL or local readable file")
parser.add_argument("-v", "--verbose", action="count", default=defaults.verbose,
                    help="increase output verbosity")
parser.add_argument("-r", "--region", action="store", default=None,
                    help="region name, kml file will be cropped by this region")
parser.add_argument("-R", "--region-file", action="store", default=None,
                    help="kml file containing region if different from main kml file")
parser.add_argument("-o", "--optimize-styles", action="store_true",
                    help="eliminate redundant style data")
parser.add_argument("-p", "--optimize-paths", action="store_true",
                    help="reduce path sizes")
parser.add_argument("--path-error-limit", action="store", type=float, default=defaults.path_error_limit,
                    help="path optimization limit (distance in degrees) default is %f" % defaults.path_error_limit)
parser.add_argument("-s", "--stats", action="store_true",
                    help="generate statistics for kml document")
parser.add_argument("--stats-format", action="store", choices=['json', 'text'], default=defaults.stats_format,
                    help="format for statistics output, 'json' or the default '%s'" % defaults.stats_format)
parser.add_argument("--stats-detail", action="store_true",
                    help="generate extra detailed statistics for kml document")
parser.add_argument("-O", "--output-file", action="store", default=defaults.out_kml, dest='out_kml',
                    help="destination of output", type=argparse.FileType('w'))
parser.add_argument("-f", "--pretty-print", action="store_true",
                    help="format the output for human readability")
parser.add_argument("-c", "--optimize-coordinates", action="store_true",
                    help="optimize path coordinates by limiting precision and eliminating altitude")
parser.add_argument("--namespaces", action="store_true",
                    help="list xml namespaces used in the kml document")
parser.add_argument("--filter", action="store", default=None,
                    help="when using --flat or --tree, filter to only show the one or comma delimited list specified. Usual feature types are Polygon, Path, Point")
parser.add_argument("--no-kml-out", "--no-kml", action="store_true",
                    help="suppress output of kml document, just output statistics, list and/or namespaces to stdout")
parser.add_argument("--tree", action="store_true",
                    help="list names of features in a tree structure, see --filter")
parser.add_argument("--list", action="store_true",
                    help="list names of features in a flat list, see --filter")
parser.add_argument("--list-format", action="store", choices=['json', 'text'], default=defaults.list_format,
                    help="list format, 'json' or the default '%s'" % defaults.list_format)
parser.add_argument("--list-detail", "--list-details", action="store_true",
                    help="include node detail info in listing")
parser.add_argument("--list-with-xpaths", "--list-with-xpath", action="store_true",
                    help="include node specific xpaths in list output")
parser.add_argument("--list-only", action="append", default=[], metavar='KML-IDS',
                    help="name(s) of Folder or Placemark to list **")
parser.add_argument("--folderize", action="store_true",
                    help="move paths and points into folders if they contained in a 'Boundry' polygon child of folder")
parser.add_argument("--folderize-limit", action="store", type=float, default=defaults.folderize_limit,
                    help="minimum ratio of point in boundy to be moved into, default %f" % defaults.folderize_limit)
parser.add_argument("--serialize-names", action="store_true",
                    help="add serial numbers to paths with the default name Path")
parser.add_argument("--dump-path", action="append", default=[], metavar='KML-IDS',
                    help="name of LineString/Path to dump")
parser.add_argument("--delete", action="append", default=[], metavar='KML-IDS',
                    help="name(s) of Folder or Placemark to delete **")
parser.add_argument("--delete-styles", action="store_true",
                    help="delete all style data")
parser.add_argument("--paths-only", action="store_true",
                    help="keep only Paths")
parser.add_argument("--extract", action="append", default=[], metavar='KML-IDS',
                    help="kml names and/or xpaths of Folder(s) or Placemark(s) to keep, all other's will be deleted ** extracting folders will keep all descendants")
parser.add_argument("--geojson", action="store_true",
                    help="output GeoJSON instead of KML")
parser.add_argument("--demulti-paths", action="store_true",
                    help="convert multisegment paths to a normal path")
parser.add_argument("--validate-styles", action="store_true",
                    help="validate all style id references")
parser.add_argument("--rename", action="append", default=[], nargs=2, metavar=('KML-ID', 'NEW-NAME'),
                    help="rename feature(s) KML-ID to NEW-NAME")
parser.add_argument("--combine", action="store", default=False, dest='combine',
                    help="append file/features from kml to input kml", type=argparse.FileType('r'))
parser.add_argument("--combine-filter", action="append", default=[], dest='combine_filter', metavar='KML-IDS',
                    help="kml names and/or xpaths of Folder(s) or Placemark(s) to append with main input kml **")

args = parser.parse_args()

if args.verbose:
    print("=== Options ===", file=sys.stderr)
    for n, v in args.__dict__.iteritems():
        print("{0:>16s}: {1:s}".format(n, str(v)), file=sys.stderr)

options = AttrDict(args.__dict__)
options.filter = None if args.filter is None else args.filter.split(",")

if args.no_kml_out or (options.out_kml is None and (len(args.dump_path) or len(args.rename) or args.stats or args.list or args.tree or args.namespaces)):
    options.out_list = sys.stdout
    options.out_stats = sys.stdout
    options.out_nsmap = sys.stdout
    options.out_kml = None
else:
    options.out_list = sys.stderr
    options.out_stats = sys.stderr
    options.out_nsmap = sys.stderr
    options.out_kml = sys.stdout if options.out_kml is None else options.out_kml

kmlutil.process(options)
